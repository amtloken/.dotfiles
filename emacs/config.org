#+title: Konfigurasjonsdokument for GNU Emacs
#+author: Arne Magnus Tveita Løken
#+options: toc:2

* Innholdsfortegnelse :toc:
- [[#fonter][Fonter]]
  - [[#midlertidig-justering-av-fonter][Midlertidig justering av fonter]]
- [[#pakkehåndtering][Pakkehåndtering]]
- [[#filenkoding][Filenkoding]]
- [[#magit][Magit]]
- [[#evil][Evil]]
- [[#all-the-icons][All the icons]]
- [[#fargetema][Fargetema]]
- [[#neotree][Neotree]]
- [[#projectile][Projectile]]
- [[#backup][Backup]]
- [[#diminish][Diminish]]
- [[#org-mode][Org mode]]
  - [[#agenda][Agenda]]
  - [[#org-bullets][Org bullets]]
  - [[#diminish-org-indent][Diminish org indent]]
  - [[#org-level-headers][Org Level Headers]]
  - [[#org-tempo][Org tempo]]
  - [[#preserve-indentation-on-org-babel-tangle][Preserve Indentation on Org-Babel-Tangle]]
  - [[#toc-org][Toc-Org]]
- [[#rainbow-delimiters][Rainbow Delimiters]]
- [[#company][Company]]
- [[#ivy][Ivy]]
- [[#python][Python]]
- [[#general-keybindings][General keybindings]]

* Fonter
#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :font "Source Code Pro"
                    :height 110
                    :weight 'medium)
(set-face-attribute 'variable-pitch nil
                    :font "Source Serif 4 Medium"
                    :height 120
                    :weight 'medium)
(set-face-attribute 'fixed-pitch nil
                    :font "Source Code Pro"
                    :height 110
                    :weight 'medium)
(set-face-attribute 'font-lock-comment-face nil
                    :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
                    :slant 'italic)

(add-to-list 'default-frame-alist '(font. "Source Code Pro-11"))

(setq-default line-spacing 0.12)
#+end_src

** Midlertidig justering av fonter
Bruk CTRL og +/-, eller musehjulet, til å justere fontstørrelse ved behov.

#+begin_src emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* Pakkehåndtering
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-and-compile
  (setq use-package-always-ensure t
        use-package-expand-minimally t))
#+end_src

* Filenkoding
#+begin_src emacs-lisp
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-selection-coding-system 'utf-8)
#+end_src

* Magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))
#+end_src

* Evil
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil
        evil-vsplit-window-right t
        evil-split-window-below t
        evil-undo-system 'undo-redo)
  (evil-mode))

(use-package evil-collection
  :after evil
  :config
  (add-to-list 'evil-collection-mode-list 'help)
  (evil-collection-init))

(use-package evil-tutor)

(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))

(setq org-return-follows-link t)
#+end_src

* All the icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda() (all-the-icons-dired-mode t))))
#+end_src
* Fargetema
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t
	doom-themes-enable-italic t)
  (load-theme 'doom-one t)
  (doom-themes-neotree-config)
  (doom-themes-org-config))
#+end_src
* Neotree
#+begin_src emacs-lisp
(use-package neotree
  :config
  (setq neo-smart-open t
	neo-show-hidden-files t
	neo-window-width 55
	neo-window-fixed-size nil
	inhibit-compacting-font-caches t
	projectile-switch-project-action 'neotree-projectile-action)
  (add-hook 'neo-after-create-hook
	    #'(lambda (_)
		(with-current-buffer (get-buffer neo-buffer-name)
		  (setq truncate-lines t)
		  (setq word-wrap nil)
		  (make-local-variable 'auto-hscroll-mode)
		  (setq auto-hscroll-mode nil)))))
#+end_src
* Projectile
#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode 1))
#+end_src
* Backup
Flytter automatiske backup-filer til et dedikert sted, heller enn hvor enn
fila under redigering befinner seg.
#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src


* Diminish
Pakke som gjemmer eller forkorter modelinje-visninger av minor modes.
#+begin_src emacs-lisp
(use-package diminish)
#+end_src
* Org mode
** Agenda
#+begin_src emacs-lisp
(setq org-agenda-files '("~/Org/agenda.org"))
#+end_src
** Org bullets
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda() (org-bullets-mode 1)))
#+end_src
** Diminish org indent
#+begin_src emacs-lisp
(eval-after-load 'org-indent '(diminish 'org-indent-mode))
#+end_src
** Org Level Headers
#+begin_src emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:inherit-outline-1 :height 1.7))))
 '(org-level-2 ((t (:inherit-outline-2 :height 1.6))))
 '(org-level-3 ((t (:inherit-outline-3 :height 1.5))))
 '(org-level-4 ((t (:inherit-outline-4 :height 1.4))))
 '(org-level-5 ((t (:inherit-outline-5 :height 1.3))))
 '(org-level-6 ((t (:inherit-outline-5 :height 1.2))))
 '(org-level-7 ((t (:inherit-outline-5 :height 1.1)))))
#+end_src
** Org tempo
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src
** Preserve Indentation on Org-Babel-Tangle
#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
#+end_src
** Toc-Org
#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

* Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :config
  (rainbow-delimiters-mode))
#+end_src

* Company
#+begin_src emacs-lisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src

* Ivy
#+begin_src emacs-lisp
(use-package counsel
  :after ivt
  :diminish
  :config
  (counsel-mode)
  (setq ivy-initial-inputs-alist nil)) ;; removes starting ^ regex in M-x

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :diminish
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :init
  (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1) ;; This gets us descriptions in M-x
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
			         'ivy-rich-switch-buffer-transformer))

#+end_src

* Python
#+begin_src emacs-lisp
(use-package conda
  :init
  (conda-env-initialize-interactive-shells)
  (conda-env-initialize-eshell)
  (conda-env-autoactivate-mode t)
  (conda-mode-line-setup)
  :config
  (setq conda-env-home-directory '(getenv "CONDA_HOME")
	  python-shell-interpreter "python"))
#+end_src

* General keybindings
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)

  ;; Set up 'SPC' as the global leader key
  (general-create-definer amtl/leader-keys
	:states '(normal insert visual emacs)
	:keymaps 'override
	:prefix "SPC" ;; set leader
	:global-prefix "M-SPC") ;; access leader in insert mode
  )
		

#+end_src

# Local Variables:
# coding: utf-8
# End:
